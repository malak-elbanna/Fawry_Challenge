@startuml

interface Shippable {
    + getTitle(): String
    + getAuthor(): String
}

interface Emailable {
    + getTitle(): String
    + getFileType(): String
}

class ShippableInfo implements Shippable {
    - title: String
    - author: String
    + ShippableInfo(book: Book)
    + getTitle(): String
    + getAuthor(): String
}

class EmailableInfo implements Emailable {
    - title: String
    - fileType: String
    + EmailableInfo(book: Book)
    + getTitle(): String
    + getFileType(): String
}

enum DeliveryType {
    SHIPPABLE
    EMAILABLE
    NONE
}

class Book {
    - isbn: String
    - title: String
    - author: String
    - year: int
    - price: double
    - quantity: int
    - fileType: String ' Nullable
    - deliveryType: DeliveryType
    + isForSale(): boolean
    + isOutdated(currentYear: int, threshold: int): boolean
    + decreaseQuantity(amount: int): void
    + getDeliveryType(): DeliveryType
}

class ShippingService {
    + ship(item: Shippable, address: String): void
}

class MailService {
    + send(item: Emailable, email: String): void
}

class BookInventory {
    - books: Map<String, Book>
    - shippingService: ShippingService
    - mailService: MailService
    + addBook(book: Book): void
    + removeOutdatedBooks(currentYear: int, threshold: int): List<Book>
    + buyBook(isbn: String, quantity: int, email: String, address: String): double
}

Book o--> "1" DeliveryType

BookInventory "1" o--> "*" Book : contains
BookInventory "1" --> "1" ShippingService : uses
BookInventory "1" --> "1" MailService : uses

BookInventory ..> ShippableInfo : creates
BookInventory ..> EmailableInfo : creates

ShippingService ..> Shippable
MailService ..> Emailable

@enduml